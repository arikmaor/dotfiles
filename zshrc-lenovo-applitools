eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

fpath=(~/.docker/completions $fpath)
autoload -Uz compinit
compinit

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

[ -s kubectl ] && source <(kubectl completion zsh)
[ -s k3d ] && source <(k3d completion zsh)
[ -s temporal ] && source <(temporal completion zsh)

source $(brew --prefix)/share/antigen/antigen.zsh
export DEFAULT_USER=arik # for agnoster theme

export EDITOR=nvim
export KUBE_EDITOR=nvim

antigen use oh-my-zsh
antigen theme agnoster

antigen bundles <<EOBUNDLES
  git
  z
  zsh-users/zsh-syntax-highlighting
  terraform
  memark/zsh-dotnet-completion
EOBUNDLES

antigen apply

RPROMPT=$'%{$fg[white]%}$(tf_prompt_info)%{$reset_color%}'

export DOTNET_ROOT=$HOME/.dotnet
export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools

source <(fzf --zsh)

export CHROME_DEVEL_SANDBOX=/usr/local/sbin/chrome-devel-sandbox

alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'

alias git=hub
alias vim=nvim
alias t=terraform
alias k=kubectl
alias kctx=kubectx
alias kns=kubens
alias lg=lazygit

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /home/linuxbrew/.linuxbrew/Cellar/tfenv/3.0.0/versions/1.5.7/terraform terraform

gfix() {
  rev=$1

  if [[ -z $rev ]]; then
    rev=$(git log --oneline | fzf --reverse --height=10 | cut -d ' ' -f 1)
  fi

  if [[ -z $rev ]]; then
    return 0
  fi

  git commit --fixup $rev

  # CHANGED=$(git diff-index --name-only HEAD --)
  # if [[ -n $CHANGED ]]; then
  #   git stash push
  # fi

  git rebase --autostash -i $rev^

  # if [[ -n $CHANGED ]]; then
  #   git stash pop
  # fi
}

refresh_k8s_clusters() {
  for sub in $(az account list | jq -r '.[].id | select(. != "2ca03b1f-eabe-479a-9129-6133fc785c55" and . != "2ca03b1f-eabe-479a-9129-6133fc785c55")'); do
    echo $sub
    for group in $(az group list --subscription $sub | jq -r '.[].name'); do
      echo "   $group"
      for name in $(az aks list --subscription $sub --resource-group $group | jq -r '.[].name'); do
        echo "       $name"
        az aks get-credentials --subscription $sub --resource-group $group --name $name
      done
    done
  done
}
